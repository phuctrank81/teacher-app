import React, { useEffect, useState } from 'react'
import { supabase } from '../../supabaseClient'
import '../App.css'
import SupaBaseHeader from './supaBaseHeader'

export default function AttendanceTable() {
    const [users, setUsers] = useState([])
    const [attendance, setAttendance] = useState([])
    const [selectedClass, setSelectedClass] = useState('10')
    const [selectedMonth, setSelectedMonth] = useState(
        new Date().toISOString().slice(0, 7)
    )
    const [today, setToday] = useState(new Date().toISOString().split('T')[0])
    const [isDeletingMonth, setIsDeletingMonth] = useState(false)

    // ======= L·∫§Y D·ªÆ LI·ªÜU BAN ƒê·∫¶U =======
    useEffect(() => {
        fetchUsers()
    }, [])

    useEffect(() => {
        fetchAttendance()
    }, [selectedMonth, today])

    // ======= T·ª∞ C·∫¨P NH·∫¨T NG√ÄY M·ªöI =======
    useEffect(() => {
        const interval = setInterval(() => {
            const current = new Date().toISOString().split('T')[0]
            if (current !== today) setToday(current)
        }, 60000)
        return () => clearInterval(interval)
    }, [today])

    // ======= SUPABASE FETCH =======
    async function fetchUsers() {
        const { data, error } = await supabase.from('users').select('*')
        if (error) console.error('‚ùå L·ªói l·∫•y h·ªçc sinh:', error)
        else setUsers(data)
    }

    async function fetchAttendance() {
        const [year, month] = selectedMonth.split('-')
        const start = new Date(year, month - 1, 1)
        const end = new Date(year, month, 0, 23, 59, 59, 999)

        const { data, error } = await supabase
            .from('attendance')
            .select('*')
            .gte('created_at', start.toISOString())
            .lte('created_at', end.toISOString())

        if (error) console.error('‚ùå L·ªói l·∫•y ƒëi·ªÉm danh:', error)
        else setAttendance(data)
    }

    // ======= H√ÄM ƒêI·ªÇM DANH =======
    async function markAttendance(userId, isPresent) {
        const todayDate = new Date().toISOString().split('T')[0]

        // 1Ô∏è‚É£ Ki·ªÉm tra xem h√¥m nay ƒë√£ c√≥ ƒëi·ªÉm danh ch∆∞a
        const { data: existing, error } = await supabase
            .from('attendance')
            .select('*')
            .eq('user_id', userId)
            .gte('created_at', `${todayDate}T00:00:00`)
            .lte('created_at', `${todayDate}T23:59:59`)

        if (error) {
            alert('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ƒëi·ªÉm danh!')
            return
        }

        // 2Ô∏è‚É£ N·∫øu ƒë√£ c√≥ -> c·∫≠p nh·∫≠t l·∫°i
        if (existing.length > 0) {
            const current = existing[0]
            const { error: updateError } = await supabase
                .from('attendance')
                .update({ present: isPresent })
                .eq('id', current.id)

            if (updateError) {
                alert('‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm danh!')
                return
            }

            // C·∫≠p nh·∫≠t ngay trong state
            setAttendance(prev =>
                prev.map(a =>
                    a.id === current.id ? { ...a, present: isPresent } : a
                )
            )

            alert('‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm danh h√¥m nay!')
        } else {
            // 3Ô∏è‚É£ N·∫øu ch∆∞a c√≥ -> th√™m m·ªõi
            const { data: newRecord, error: insertError } = await supabase
                .from('attendance')
                .insert([{ user_id: userId, present: isPresent }])
                .select()

            if (insertError) {
                alert('‚ùå L·ªói khi th√™m ƒëi·ªÉm danh!')
                return
            }

            // Th√™m ngay v√†o state (ƒë·ªÉ tƒÉng s·ªë bu·ªïi)
            setAttendance(prev => [...prev, ...newRecord])
            alert('‚úÖ ƒê√£ ƒëi·ªÉm danh m·ªõi!')
        }

        // 4Ô∏è‚É£ C·∫≠p nh·∫≠t t·ªïng bu·ªïi c√≥ m·∫∑t (t·∫•t c·∫£)
        await updateUserTotalPresent(userId)
    }

    // ======= C·∫¨P NH·∫¨T T·ªîNG BU·ªîI C√ì M·∫∂T (TRONG USERS) =======
    async function updateUserTotalPresent(userId) {
        const { data: presentList, error } = await supabase
            .from('attendance')
            .select('*')
            .eq('user_id', userId)
            .eq('present', true)

        if (error) {
            console.error('‚ùå L·ªói khi ƒë·∫øm bu·ªïi c√≥ m·∫∑t:', error)
            return
        }

        const total = presentList.length

        const { error: updateError } = await supabase
            .from('users')
            .update({ total_present: total })
            .eq('id', userId)

        if (updateError)
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t total_present:', updateError)
        else console.log(`‚úÖ C·∫≠p nh·∫≠t total_present = ${total} cho user ${userId}`)

        // C·∫≠p nh·∫≠t ngay trong state users
        setUsers(prev =>
            prev.map(u =>
                u.id === userId ? { ...u, total_present: total } : u
            )
        )
    }

    // ======= X√ìA ƒêI·ªÇM DANH THEO TH√ÅNG =======
    async function deleteMonthlyAttendance() {
        const confirmDelete = window.confirm(
            `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô ƒëi·ªÉm danh c·ªßa th√°ng ${selectedMonth} kh√¥ng?`
        )
        if (!confirmDelete) return

        setIsDeletingMonth(true)
        const [year, month] = selectedMonth.split('-')
        const start = new Date(year, month - 1, 1)
        const end = new Date(year, month, 0, 23, 59, 59, 999)

        const { error } = await supabase
            .from('attendance')
            .delete()
            .gte('created_at', start.toISOString())
            .lte('created_at', end.toISOString())

        if (error) {
            alert('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu th√°ng!')
            console.error(error)
        } else {
            alert(`üóë ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu ƒëi·ªÉm danh th√°ng ${selectedMonth}!`)
            await fetchAttendance()
        }

        setIsDeletingMonth(false)
    }

    // ======= H√ÄM H·ªñ TR·ª¢ =======
    const filteredUsers = users.filter(u => u.class === selectedClass)

    function getTodayStatus(userId) {
        const record = attendance.find(a => {
            const date = new Date(a.created_at).toISOString().split('T')[0]
            return a.user_id === userId && date === today
        })
        if (!record) return 'Ch∆∞a ƒëi·ªÉm danh'
        return record.present ? 'C√≥ m·∫∑t' : 'V·∫Øng'
    }

    function getAttendanceHistory(userId) {
        return attendance
            .filter(a => a.user_id === userId)
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(0, 5)
    }

    // ƒê·∫øm t·ªïng bu·ªïi c√≥ m·∫∑t trong th√°ng hi·ªán t·∫°i
    function getMonthlyAttendanceCount(userId) {
        const [year, month] = selectedMonth.split('-')
        const start = new Date(year, month - 1, 1)
        const end = new Date(year, month, 0, 23, 59, 59, 999)
        return attendance.filter(a => {
            const d = new Date(a.created_at)
            return (
                a.user_id === userId &&
                a.present &&
                d >= start &&
                d <= end
            )
        }).length
    }

    // ======= GIAO DI·ªÜN =======
    return (
        <div>
            <SupaBaseHeader />
            <h2>B·∫¢NG ƒêI·ªÇM DANH H·ªåC SINH</h2>

            <div className="filter-bar">
                <label>
                    L·ªõp:{' '}
                    <select
                        value={selectedClass}
                        onChange={e => setSelectedClass(e.target.value)}
                    >
                        <option value="10">L·ªõp 10</option>
                        <option value="11">L·ªõp 11</option>
                        <option value="12">L·ªõp 12</option>
                        <option value="Ielts t3-t5 ca2">Ielts t3-t5 ca2</option>
                        <option value="Ielts t2 - cn ">Ielts t2 - cn </option>
                        <option value="ielts t2-cn(1)">Ielts t2-cn(1)</option>
                        <option value="ielts t2-cn (2)">Ielts t2-cn (2)</option>
                        <option value="ielts t6-t7">Ielts t6-t7</option>
                        <option value="ielts t7-cn">Ielts t7-cn</option>
                    </select>
                </label>

                <label style={{ marginLeft: '20px' }}>
                    Th√°ng:{' '}
                    <input
                        type="month"
                        value={selectedMonth}
                        onChange={e => setSelectedMonth(e.target.value)}
                    />
                </label>

                <button
                    onClick={deleteMonthlyAttendance}
                    className="btn-delete-month"
                    disabled={isDeletingMonth}
                    style={{
                        marginLeft: '20px',
                        backgroundColor: '#d9534f',
                        color: 'white',
                        border: 'none',
                        padding: '8px 12px',
                        borderRadius: '6px'
                    }}
                >
                    {isDeletingMonth
                        ? 'ƒêang x√≥a...'
                        : `üóë X√≥a to√†n b·ªô th√°ng ${selectedMonth}`}
                </button>
            </div>

            <table className="table-student">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>T√™n h·ªçc sinh</th>
                        <th>Gi·ªõi t√≠nh</th>
                        <th>L·ªõp</th>
                        <th>T·ªïng bu·ªïi c√≥ m·∫∑t (t·∫•t c·∫£)</th>
                        <th>Tr·∫°ng th√°i h√¥m nay</th>
                        <th>ƒêi·ªÉm danh</th>
                        <th>L·ªãch s·ª≠ g·∫ßn ƒë√¢y</th>
                        <th>T·ªïng bu·ªïi c√≥ m·∫∑t (th√°ng)</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredUsers.map(u => (
                        <tr key={u.id}>
                            <td>{u.id}</td>
                            <td>{u.name}</td>
                            <td>{u.gender}</td>
                            <td>{u.class}</td>
                            <td>{u.total_present || 0}</td>
                            <td>{getTodayStatus(u.id)}</td>
                            <td>
                                <button
                                    className="btn-present"
                                    onClick={() => markAttendance(u.id, true)}
                                >
                                    ‚úÖ C√≥ m·∫∑t
                                </button>
                                <button
                                    className="btn-absent"
                                    onClick={() => markAttendance(u.id, false)}
                                >
                                    ‚ùå V·∫Øng
                                </button>
                            </td>
                            <td>
                                {getAttendanceHistory(u.id).length > 0 ? (
                                    <ul>
                                        {getAttendanceHistory(u.id).map(a => (
                                            <li
                                                key={a.id}
                                                style={{
                                                    color: a.present
                                                        ? 'green'
                                                        : 'red',
                                                    fontWeight: '500'
                                                }}
                                            >
                                                {new Date(
                                                    a.created_at
                                                ).toLocaleString('vi-VN', {
                                                    dateStyle: 'short',
                                                    timeStyle: 'short'
                                                })}{' '}
                                                ‚Äì{' '}
                                                {a.present
                                                    ? 'C√≥ m·∫∑t'
                                                    : 'V·∫Øng'}
                                            </li>
                                        ))}
                                    </ul>
                                ) : (
                                    <span>Ch∆∞a c√≥</span>
                                )}
                            </td>
                            <td>
                                {getMonthlyAttendanceCount(u.id)} / 8 bu·ªïi
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    )
}
