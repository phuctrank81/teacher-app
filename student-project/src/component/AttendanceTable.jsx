import React, { useEffect, useState } from 'react'
import { supabase } from '../../supabaseClient'
import '../App.css'
import SupaBaseHeader from './supaBaseHeader'

export default function AttendanceTable() {
    const [users, setUsers] = useState([])
    const [attendance, setAttendance] = useState([])
    const [selectedClass, setSelectedClass] = useState('10')
    const [selectedMonth, setSelectedMonth] = useState(
        new Date().toISOString().slice(0, 7)
    )
    const [today, setToday] = useState(new Date().toISOString().split('T')[0]) // ‚úÖ Th√™m bi·∫øn theo d√µi ng√†y
    const [isDeletingMonth, setIsDeletingMonth] = useState(false)

    useEffect(() => {
        fetchUsers()
    }, [])

    // ‚úÖ Khi ƒë·ªïi th√°ng ho·∫∑c qua ng√†y m·ªõi ‚Üí c·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm danh
    useEffect(() => {
        fetchAttendance()
    }, [selectedMonth, today])

    // ‚úÖ C·ª© m·ªói 60 gi√¢y ki·ªÉm tra xem c√≥ qua ng√†y m·ªõi ch∆∞a
    useEffect(() => {
        const interval = setInterval(() => {
            const current = new Date().toISOString().split('T')[0]
            if (current !== today) {
                setToday(current)
            }
        }, 60000)
        return () => clearInterval(interval)
    }, [today])

    async function fetchUsers() {
        const { data, error } = await supabase.from('users').select('*')
        if (error) console.error('L·ªói l·∫•y h·ªçc sinh:', error)
        else setUsers(data)
    }

    async function fetchAttendance() {
        const [year, month] = selectedMonth.split('-')
        const start = new Date(year, month - 1, 1)
        const end = new Date(year, month, 0, 23, 59, 59, 999)

        const { data, error } = await supabase
            .from('attendance')
            .select('*')
            .gte('created_at', start.toISOString())
            .lte('created_at', end.toISOString())

        if (error) console.error('L·ªói l·∫•y ƒëi·ªÉm danh:', error)
        else setAttendance(data)
    }

    // ‚úÖ ƒêi·ªÉm danh h·ªçc sinh
    async function markAttendance(userId, isPresent) {
        const today = new Date().toISOString().split('T')[0]

        const { data: existing } = await supabase
            .from('attendance')
            .select('*')
            .eq('user_id', userId)
            .gte('created_at', `${today}T00:00:00`)
            .lte('created_at', `${today}T23:59:59`)

        if (existing.length > 0) {
            await supabase
                .from('attendance')
                .update({ present: isPresent })
                .eq('id', existing[0].id)
            alert('‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm danh h√¥m nay!')
        } else {
            await supabase
                .from('attendance')
                .insert([{ user_id: userId, present: isPresent }])
            alert('‚úÖ ƒê√£ ƒëi·ªÉm danh m·ªõi!')
        }

        // ‚úÖ Sau khi ƒëi·ªÉm danh ‚Üí c·∫≠p nh·∫≠t l·∫°i danh s√°ch ngay
        await fetchAttendance()
    }

    // üóë X√≥a to√†n b·ªô ƒëi·ªÉm danh trong th√°ng
    async function deleteMonthlyAttendance() {
        const confirmDelete = window.confirm(
            `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô ƒëi·ªÉm danh c·ªßa th√°ng ${selectedMonth} kh√¥ng?`
        )
        if (!confirmDelete) return

        setIsDeletingMonth(true)

        const [year, month] = selectedMonth.split('-')
        const start = new Date(year, month - 1, 1)
        const end = new Date(year, month, 0, 23, 59, 59, 999)

        const { error } = await supabase
            .from('attendance')
            .delete()
            .gte('created_at', start.toISOString())
            .lte('created_at', end.toISOString())

        if (error) {
            alert('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu th√°ng!')
            console.error(error)
        } else {
            alert(`üóë ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu ƒëi·ªÉm danh th√°ng ${selectedMonth}!`)
            await fetchAttendance()
        }

        setIsDeletingMonth(false)
    }

    // üéØ L·ªçc h·ªçc sinh theo l·ªõp
    const filteredUsers = users.filter(u => u.class === selectedClass)

    // üìÖ Tr·∫°ng th√°i h√¥m nay
    function getTodayStatus(userId) {
        const record = attendance.find(a => {
            const date = new Date(a.created_at).toISOString().split('T')[0]
            return a.user_id === userId && date === today
        })
        if (!record) return 'Ch∆∞a ƒëi·ªÉm danh'
        return record.present ? 'C√≥ m·∫∑t' : 'V·∫Øng'
    }

    // üìú L·ªãch s·ª≠ 5 bu·ªïi g·∫ßn nh·∫•t
    function getAttendanceHistory(userId) {
        return attendance
            .filter(a => a.user_id === userId)
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(0, 5)
    }

    // üìä T·ªïng s·ªë bu·ªïi c√≥ m·∫∑t trong th√°ng
    function getMonthlyAttendanceCount(userId) {
        return attendance.filter(a => a.user_id === userId && a.present).length
    }

    return (
        <div>
            <SupaBaseHeader />
            <h2>B·∫¢NG ƒêI·ªÇM DANH H·ªåC SINH</h2>

            <div className="filter-bar">
                <label>
                    L·ªõp:{' '}
                    <select
                        value={selectedClass}
                        onChange={e => setSelectedClass(e.target.value)}
                    >
                        <option value="10">L·ªõp 10</option>
                        <option value="11">L·ªõp 11</option>
                        <option value="12">L·ªõp 12</option>
                        <option value="Ielts t3-t5 ca2">Ielts t3-t5 ca2</option>
                        <option value="Ielts t2 - cn ">Ielts t2 - cn </option>
                        <option value="ielts t2-cn(1)">Ielts t2-cn(1)</option>
                        <option value="ielts t2-cn (2)">Ielts t2-cn (2)</option>
                        <option value="ielts t6-t7">Ielts t6-t7</option>
                        <option value="ielts t7-cn">Ielts t7-cn</option>
                    </select>
                </label>

                <label style={{ marginLeft: '20px' }}>
                    Th√°ng:{' '}
                    <input
                        type="month"
                        value={selectedMonth}
                        onChange={e => setSelectedMonth(e.target.value)}
                    />
                </label>

                <button
                    onClick={deleteMonthlyAttendance}
                    className="btn-delete-month"
                    disabled={isDeletingMonth}
                    style={{
                        marginLeft: '20px',
                        backgroundColor: '#d9534f',
                        color: 'white',
                        border: 'none',
                        padding: '8px 12px',
                        borderRadius: '6px'
                    }}
                >
                    {isDeletingMonth ? 'ƒêang x√≥a...' : `üóë X√≥a to√†n b·ªô th√°ng ${selectedMonth}`}
                </button>
            </div>

            <table className="table-student">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>T√™n h·ªçc sinh</th>
                        <th>Gi·ªõi t√≠nh</th>
                        <th>L·ªõp</th>
                        <th>Tr·∫°ng th√°i h√¥m nay</th>
                        <th>ƒêi·ªÉm danh</th>
                        <th>L·ªãch s·ª≠ g·∫ßn ƒë√¢y</th>
                        <th>T·ªïng bu·ªïi c√≥ m·∫∑t (th√°ng)</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredUsers.map(u => (
                        <tr key={u.id}>
                            <td>{u.id}</td>
                            <td>{u.name}</td>
                            <td>{u.gender}</td>
                            <td>{u.class}</td>
                            <td>{getTodayStatus(u.id)}</td>
                            <td>
                                <button className="btn-present" onClick={() => markAttendance(u.id, true)}>
                                    ‚úÖ C√≥ m·∫∑t
                                </button>
                                <button className="btn-absent" onClick={() => markAttendance(u.id, false)}>
                                    ‚ùå V·∫Øng
                                </button>
                            </td>

                            <td>
                                {getAttendanceHistory(u.id).length > 0 ? (
                                    <ul>
                                        {getAttendanceHistory(u.id).map(a => (
                                            <li
                                                key={a.id}
                                                style={{
                                                    color: a.present ? 'green' : 'red',
                                                    fontWeight: '500'
                                                }}
                                            >
                                                {new Date(a.created_at).toLocaleString('vi-VN', {
                                                    dateStyle: 'short',
                                                    timeStyle: 'short'
                                                })}{' '}
                                                ‚Äì {a.present ? 'C√≥ m·∫∑t' : 'V·∫Øng'}
                                            </li>
                                        ))}
                                    </ul>
                                ) : (
                                    <span>Ch∆∞a c√≥</span>
                                )}
                            </td>

                            <td>{getMonthlyAttendanceCount(u.id)} / 8 bu·ªïi</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    )
}


// incinerate 
